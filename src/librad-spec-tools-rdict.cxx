//
// File generated by /.hb/raidg01/sw/root/linux-ubuntu-12.04-x86_64/5.34.17/bin/rootcint at Mon Jul 28 18:15:35 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME libradmIspecmItoolsmIrdict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "librad-spec-tools-rdict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void rsptcLcLBinning_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void rsptcLcLBinning_Dictionary();
   static void *new_rsptcLcLBinning(void *p = 0);
   static void *newArray_rsptcLcLBinning(Long_t size, void *p);
   static void delete_rsptcLcLBinning(void *p);
   static void deleteArray_rsptcLcLBinning(void *p);
   static void destruct_rsptcLcLBinning(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::rspt::Binning*)
   {
      ::rspt::Binning *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::rspt::Binning),0);
      static ::ROOT::TGenericClassInfo 
         instance("rspt::Binning", "./Binning.h", 30,
                  typeid(::rspt::Binning), DefineBehavior(ptr, ptr),
                  0, &rsptcLcLBinning_Dictionary, isa_proxy, 1,
                  sizeof(::rspt::Binning) );
      instance.SetNew(&new_rsptcLcLBinning);
      instance.SetNewArray(&newArray_rsptcLcLBinning);
      instance.SetDelete(&delete_rsptcLcLBinning);
      instance.SetDeleteArray(&deleteArray_rsptcLcLBinning);
      instance.SetDestructor(&destruct_rsptcLcLBinning);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::rspt::Binning*)
   {
      return GenerateInitInstanceLocal((::rspt::Binning*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::rspt::Binning*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void rsptcLcLBinning_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::rspt::Binning*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void rsptcLcLHistAnalysis_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void rsptcLcLHistAnalysis_Dictionary();
   static void *new_rsptcLcLHistAnalysis(void *p = 0);
   static void *newArray_rsptcLcLHistAnalysis(Long_t size, void *p);
   static void delete_rsptcLcLHistAnalysis(void *p);
   static void deleteArray_rsptcLcLHistAnalysis(void *p);
   static void destruct_rsptcLcLHistAnalysis(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::rspt::HistAnalysis*)
   {
      ::rspt::HistAnalysis *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::rspt::HistAnalysis),0);
      static ::ROOT::TGenericClassInfo 
         instance("rspt::HistAnalysis", "./HistAnalysis.h", 32,
                  typeid(::rspt::HistAnalysis), DefineBehavior(ptr, ptr),
                  0, &rsptcLcLHistAnalysis_Dictionary, isa_proxy, 1,
                  sizeof(::rspt::HistAnalysis) );
      instance.SetNew(&new_rsptcLcLHistAnalysis);
      instance.SetNewArray(&newArray_rsptcLcLHistAnalysis);
      instance.SetDelete(&delete_rsptcLcLHistAnalysis);
      instance.SetDeleteArray(&deleteArray_rsptcLcLHistAnalysis);
      instance.SetDestructor(&destruct_rsptcLcLHistAnalysis);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::rspt::HistAnalysis*)
   {
      return GenerateInitInstanceLocal((::rspt::HistAnalysis*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::rspt::HistAnalysis*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void rsptcLcLHistAnalysis_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::rspt::HistAnalysis*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void rsptcLcLSDFitData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void rsptcLcLSDFitData_Dictionary();
   static void delete_rsptcLcLSDFitData(void *p);
   static void deleteArray_rsptcLcLSDFitData(void *p);
   static void destruct_rsptcLcLSDFitData(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::rspt::SDFitData*)
   {
      ::rspt::SDFitData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::rspt::SDFitData),0);
      static ::ROOT::TGenericClassInfo 
         instance("rspt::SDFitData", "./SDFitData.h", 26,
                  typeid(::rspt::SDFitData), DefineBehavior(ptr, ptr),
                  0, &rsptcLcLSDFitData_Dictionary, isa_proxy, 1,
                  sizeof(::rspt::SDFitData) );
      instance.SetDelete(&delete_rsptcLcLSDFitData);
      instance.SetDeleteArray(&deleteArray_rsptcLcLSDFitData);
      instance.SetDestructor(&destruct_rsptcLcLSDFitData);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::rspt::SDFitData*)
   {
      return GenerateInitInstanceLocal((::rspt::SDFitData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::rspt::SDFitData*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void rsptcLcLSDFitData_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::rspt::SDFitData*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void rsptcLcLSDCalibrator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void rsptcLcLSDCalibrator_Dictionary();
   static void *new_rsptcLcLSDCalibrator(void *p = 0);
   static void *newArray_rsptcLcLSDCalibrator(Long_t size, void *p);
   static void delete_rsptcLcLSDCalibrator(void *p);
   static void deleteArray_rsptcLcLSDCalibrator(void *p);
   static void destruct_rsptcLcLSDCalibrator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::rspt::SDCalibrator*)
   {
      ::rspt::SDCalibrator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::rspt::SDCalibrator),0);
      static ::ROOT::TGenericClassInfo 
         instance("rspt::SDCalibrator", "./SDCalibrator.h", 37,
                  typeid(::rspt::SDCalibrator), DefineBehavior(ptr, ptr),
                  0, &rsptcLcLSDCalibrator_Dictionary, isa_proxy, 1,
                  sizeof(::rspt::SDCalibrator) );
      instance.SetNew(&new_rsptcLcLSDCalibrator);
      instance.SetNewArray(&newArray_rsptcLcLSDCalibrator);
      instance.SetDelete(&delete_rsptcLcLSDCalibrator);
      instance.SetDeleteArray(&deleteArray_rsptcLcLSDCalibrator);
      instance.SetDestructor(&destruct_rsptcLcLSDCalibrator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::rspt::SDCalibrator*)
   {
      return GenerateInitInstanceLocal((::rspt::SDCalibrator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::rspt::SDCalibrator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void rsptcLcLSDCalibrator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::rspt::SDCalibrator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void rsptcLcLSDMultiLineFitter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void rsptcLcLSDMultiLineFitter_Dictionary();
   static void *new_rsptcLcLSDMultiLineFitter(void *p = 0);
   static void *newArray_rsptcLcLSDMultiLineFitter(Long_t size, void *p);
   static void delete_rsptcLcLSDMultiLineFitter(void *p);
   static void deleteArray_rsptcLcLSDMultiLineFitter(void *p);
   static void destruct_rsptcLcLSDMultiLineFitter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::rspt::SDMultiLineFitter*)
   {
      ::rspt::SDMultiLineFitter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::rspt::SDMultiLineFitter),0);
      static ::ROOT::TGenericClassInfo 
         instance("rspt::SDMultiLineFitter", "./SDMultiLineFitter.h", 31,
                  typeid(::rspt::SDMultiLineFitter), DefineBehavior(ptr, ptr),
                  0, &rsptcLcLSDMultiLineFitter_Dictionary, isa_proxy, 1,
                  sizeof(::rspt::SDMultiLineFitter) );
      instance.SetNew(&new_rsptcLcLSDMultiLineFitter);
      instance.SetNewArray(&newArray_rsptcLcLSDMultiLineFitter);
      instance.SetDelete(&delete_rsptcLcLSDMultiLineFitter);
      instance.SetDeleteArray(&deleteArray_rsptcLcLSDMultiLineFitter);
      instance.SetDestructor(&destruct_rsptcLcLSDMultiLineFitter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::rspt::SDMultiLineFitter*)
   {
      return GenerateInitInstanceLocal((::rspt::SDMultiLineFitter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::rspt::SDMultiLineFitter*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void rsptcLcLSDMultiLineFitter_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::rspt::SDMultiLineFitter*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void rsptcLcLSDPeak_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void rsptcLcLSDPeak_Dictionary();
   static void *new_rsptcLcLSDPeak(void *p = 0);
   static void *newArray_rsptcLcLSDPeak(Long_t size, void *p);
   static void delete_rsptcLcLSDPeak(void *p);
   static void deleteArray_rsptcLcLSDPeak(void *p);
   static void destruct_rsptcLcLSDPeak(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::rspt::SDPeak*)
   {
      ::rspt::SDPeak *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::rspt::SDPeak),0);
      static ::ROOT::TGenericClassInfo 
         instance("rspt::SDPeak", "./SDPeak.h", 29,
                  typeid(::rspt::SDPeak), DefineBehavior(ptr, ptr),
                  0, &rsptcLcLSDPeak_Dictionary, isa_proxy, 1,
                  sizeof(::rspt::SDPeak) );
      instance.SetNew(&new_rsptcLcLSDPeak);
      instance.SetNewArray(&newArray_rsptcLcLSDPeak);
      instance.SetDelete(&delete_rsptcLcLSDPeak);
      instance.SetDeleteArray(&deleteArray_rsptcLcLSDPeak);
      instance.SetDestructor(&destruct_rsptcLcLSDPeak);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::rspt::SDPeak*)
   {
      return GenerateInitInstanceLocal((::rspt::SDPeak*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::rspt::SDPeak*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void rsptcLcLSDPeak_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::rspt::SDPeak*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void rsptcLcLMultiPeakShape_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void rsptcLcLMultiPeakShape_Dictionary();
   static void delete_rsptcLcLMultiPeakShape(void *p);
   static void deleteArray_rsptcLcLMultiPeakShape(void *p);
   static void destruct_rsptcLcLMultiPeakShape(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::rspt::MultiPeakShape*)
   {
      ::rspt::MultiPeakShape *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::rspt::MultiPeakShape),0);
      static ::ROOT::TGenericClassInfo 
         instance("rspt::MultiPeakShape", "./SDPeak.h", 55,
                  typeid(::rspt::MultiPeakShape), DefineBehavior(ptr, ptr),
                  0, &rsptcLcLMultiPeakShape_Dictionary, isa_proxy, 1,
                  sizeof(::rspt::MultiPeakShape) );
      instance.SetDelete(&delete_rsptcLcLMultiPeakShape);
      instance.SetDeleteArray(&deleteArray_rsptcLcLMultiPeakShape);
      instance.SetDestructor(&destruct_rsptcLcLMultiPeakShape);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::rspt::MultiPeakShape*)
   {
      return GenerateInitInstanceLocal((::rspt::MultiPeakShape*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::rspt::MultiPeakShape*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void rsptcLcLMultiPeakShape_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::rspt::MultiPeakShape*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void rsptcLcLSDPeakTSF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void rsptcLcLSDPeakTSF_Dictionary();
   static void *new_rsptcLcLSDPeakTSF(void *p = 0);
   static void *newArray_rsptcLcLSDPeakTSF(Long_t size, void *p);
   static void delete_rsptcLcLSDPeakTSF(void *p);
   static void deleteArray_rsptcLcLSDPeakTSF(void *p);
   static void destruct_rsptcLcLSDPeakTSF(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::rspt::SDPeakTSF*)
   {
      ::rspt::SDPeakTSF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::rspt::SDPeakTSF),0);
      static ::ROOT::TGenericClassInfo 
         instance("rspt::SDPeakTSF", "./SDPeakTSF.h", 32,
                  typeid(::rspt::SDPeakTSF), DefineBehavior(ptr, ptr),
                  0, &rsptcLcLSDPeakTSF_Dictionary, isa_proxy, 1,
                  sizeof(::rspt::SDPeakTSF) );
      instance.SetNew(&new_rsptcLcLSDPeakTSF);
      instance.SetNewArray(&newArray_rsptcLcLSDPeakTSF);
      instance.SetDelete(&delete_rsptcLcLSDPeakTSF);
      instance.SetDeleteArray(&deleteArray_rsptcLcLSDPeakTSF);
      instance.SetDestructor(&destruct_rsptcLcLSDPeakTSF);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::rspt::SDPeakTSF*)
   {
      return GenerateInitInstanceLocal((::rspt::SDPeakTSF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::rspt::SDPeakTSF*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void rsptcLcLSDPeakTSF_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::rspt::SDPeakTSF*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void rsptcLcLMultiPeakShapeTSF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void rsptcLcLMultiPeakShapeTSF_Dictionary();
   static void delete_rsptcLcLMultiPeakShapeTSF(void *p);
   static void deleteArray_rsptcLcLMultiPeakShapeTSF(void *p);
   static void destruct_rsptcLcLMultiPeakShapeTSF(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::rspt::MultiPeakShapeTSF*)
   {
      ::rspt::MultiPeakShapeTSF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::rspt::MultiPeakShapeTSF),0);
      static ::ROOT::TGenericClassInfo 
         instance("rspt::MultiPeakShapeTSF", "./SDPeakTSF.h", 55,
                  typeid(::rspt::MultiPeakShapeTSF), DefineBehavior(ptr, ptr),
                  0, &rsptcLcLMultiPeakShapeTSF_Dictionary, isa_proxy, 1,
                  sizeof(::rspt::MultiPeakShapeTSF) );
      instance.SetDelete(&delete_rsptcLcLMultiPeakShapeTSF);
      instance.SetDeleteArray(&deleteArray_rsptcLcLMultiPeakShapeTSF);
      instance.SetDestructor(&destruct_rsptcLcLMultiPeakShapeTSF);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::rspt::MultiPeakShapeTSF*)
   {
      return GenerateInitInstanceLocal((::rspt::MultiPeakShapeTSF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::rspt::MultiPeakShapeTSF*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void rsptcLcLMultiPeakShapeTSF_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::rspt::MultiPeakShapeTSF*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void rsptcLcLSDPreCal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void rsptcLcLSDPreCal_Dictionary();
   static void *new_rsptcLcLSDPreCal(void *p = 0);
   static void *newArray_rsptcLcLSDPreCal(Long_t size, void *p);
   static void delete_rsptcLcLSDPreCal(void *p);
   static void deleteArray_rsptcLcLSDPreCal(void *p);
   static void destruct_rsptcLcLSDPreCal(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::rspt::SDPreCal*)
   {
      ::rspt::SDPreCal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::rspt::SDPreCal),0);
      static ::ROOT::TGenericClassInfo 
         instance("rspt::SDPreCal", "./SDPreCal.h", 57,
                  typeid(::rspt::SDPreCal), DefineBehavior(ptr, ptr),
                  0, &rsptcLcLSDPreCal_Dictionary, isa_proxy, 1,
                  sizeof(::rspt::SDPreCal) );
      instance.SetNew(&new_rsptcLcLSDPreCal);
      instance.SetNewArray(&newArray_rsptcLcLSDPreCal);
      instance.SetDelete(&delete_rsptcLcLSDPreCal);
      instance.SetDeleteArray(&deleteArray_rsptcLcLSDPreCal);
      instance.SetDestructor(&destruct_rsptcLcLSDPreCal);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::rspt::SDPreCal*)
   {
      return GenerateInitInstanceLocal((::rspt::SDPreCal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::rspt::SDPreCal*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void rsptcLcLSDPreCal_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::rspt::SDPreCal*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_rsptcLcLBinning(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::rspt::Binning : new ::rspt::Binning;
   }
   static void *newArray_rsptcLcLBinning(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::rspt::Binning[nElements] : new ::rspt::Binning[nElements];
   }
   // Wrapper around operator delete
   static void delete_rsptcLcLBinning(void *p) {
      delete ((::rspt::Binning*)p);
   }
   static void deleteArray_rsptcLcLBinning(void *p) {
      delete [] ((::rspt::Binning*)p);
   }
   static void destruct_rsptcLcLBinning(void *p) {
      typedef ::rspt::Binning current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::rspt::Binning

namespace ROOT {
   // Wrappers around operator new
   static void *new_rsptcLcLHistAnalysis(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::rspt::HistAnalysis : new ::rspt::HistAnalysis;
   }
   static void *newArray_rsptcLcLHistAnalysis(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::rspt::HistAnalysis[nElements] : new ::rspt::HistAnalysis[nElements];
   }
   // Wrapper around operator delete
   static void delete_rsptcLcLHistAnalysis(void *p) {
      delete ((::rspt::HistAnalysis*)p);
   }
   static void deleteArray_rsptcLcLHistAnalysis(void *p) {
      delete [] ((::rspt::HistAnalysis*)p);
   }
   static void destruct_rsptcLcLHistAnalysis(void *p) {
      typedef ::rspt::HistAnalysis current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::rspt::HistAnalysis

namespace ROOT {
   // Wrappers around operator new
   static void *new_rsptcLcLSDPeak(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::rspt::SDPeak : new ::rspt::SDPeak;
   }
   static void *newArray_rsptcLcLSDPeak(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::rspt::SDPeak[nElements] : new ::rspt::SDPeak[nElements];
   }
   // Wrapper around operator delete
   static void delete_rsptcLcLSDPeak(void *p) {
      delete ((::rspt::SDPeak*)p);
   }
   static void deleteArray_rsptcLcLSDPeak(void *p) {
      delete [] ((::rspt::SDPeak*)p);
   }
   static void destruct_rsptcLcLSDPeak(void *p) {
      typedef ::rspt::SDPeak current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::rspt::SDPeak

namespace ROOT {
   // Wrapper around operator delete
   static void delete_rsptcLcLMultiPeakShape(void *p) {
      delete ((::rspt::MultiPeakShape*)p);
   }
   static void deleteArray_rsptcLcLMultiPeakShape(void *p) {
      delete [] ((::rspt::MultiPeakShape*)p);
   }
   static void destruct_rsptcLcLMultiPeakShape(void *p) {
      typedef ::rspt::MultiPeakShape current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::rspt::MultiPeakShape

namespace ROOT {
   // Wrappers around operator new
   static void *new_rsptcLcLSDPeakTSF(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::rspt::SDPeakTSF : new ::rspt::SDPeakTSF;
   }
   static void *newArray_rsptcLcLSDPeakTSF(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::rspt::SDPeakTSF[nElements] : new ::rspt::SDPeakTSF[nElements];
   }
   // Wrapper around operator delete
   static void delete_rsptcLcLSDPeakTSF(void *p) {
      delete ((::rspt::SDPeakTSF*)p);
   }
   static void deleteArray_rsptcLcLSDPeakTSF(void *p) {
      delete [] ((::rspt::SDPeakTSF*)p);
   }
   static void destruct_rsptcLcLSDPeakTSF(void *p) {
      typedef ::rspt::SDPeakTSF current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::rspt::SDPeakTSF

namespace ROOT {
   // Wrapper around operator delete
   static void delete_rsptcLcLMultiPeakShapeTSF(void *p) {
      delete ((::rspt::MultiPeakShapeTSF*)p);
   }
   static void deleteArray_rsptcLcLMultiPeakShapeTSF(void *p) {
      delete [] ((::rspt::MultiPeakShapeTSF*)p);
   }
   static void destruct_rsptcLcLMultiPeakShapeTSF(void *p) {
      typedef ::rspt::MultiPeakShapeTSF current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::rspt::MultiPeakShapeTSF

namespace ROOT {
   // Wrappers around operator new
   static void *new_rsptcLcLSDPreCal(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::rspt::SDPreCal : new ::rspt::SDPreCal;
   }
   static void *newArray_rsptcLcLSDPreCal(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::rspt::SDPreCal[nElements] : new ::rspt::SDPreCal[nElements];
   }
   // Wrapper around operator delete
   static void delete_rsptcLcLSDPreCal(void *p) {
      delete ((::rspt::SDPreCal*)p);
   }
   static void deleteArray_rsptcLcLSDPreCal(void *p) {
      delete [] ((::rspt::SDPreCal*)p);
   }
   static void destruct_rsptcLcLSDPreCal(void *p) {
      typedef ::rspt::SDPreCal current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::rspt::SDPreCal

namespace ROOT {
   // Wrappers around operator new
   static void *new_rsptcLcLSDCalibrator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::rspt::SDCalibrator : new ::rspt::SDCalibrator;
   }
   static void *newArray_rsptcLcLSDCalibrator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::rspt::SDCalibrator[nElements] : new ::rspt::SDCalibrator[nElements];
   }
   // Wrapper around operator delete
   static void delete_rsptcLcLSDCalibrator(void *p) {
      delete ((::rspt::SDCalibrator*)p);
   }
   static void deleteArray_rsptcLcLSDCalibrator(void *p) {
      delete [] ((::rspt::SDCalibrator*)p);
   }
   static void destruct_rsptcLcLSDCalibrator(void *p) {
      typedef ::rspt::SDCalibrator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::rspt::SDCalibrator

namespace ROOT {
   // Wrappers around operator new
   static void *new_rsptcLcLSDMultiLineFitter(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::rspt::SDMultiLineFitter : new ::rspt::SDMultiLineFitter;
   }
   static void *newArray_rsptcLcLSDMultiLineFitter(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::rspt::SDMultiLineFitter[nElements] : new ::rspt::SDMultiLineFitter[nElements];
   }
   // Wrapper around operator delete
   static void delete_rsptcLcLSDMultiLineFitter(void *p) {
      delete ((::rspt::SDMultiLineFitter*)p);
   }
   static void deleteArray_rsptcLcLSDMultiLineFitter(void *p) {
      delete [] ((::rspt::SDMultiLineFitter*)p);
   }
   static void destruct_rsptcLcLSDMultiLineFitter(void *p) {
      typedef ::rspt::SDMultiLineFitter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::rspt::SDMultiLineFitter

namespace ROOT {
   // Wrapper around operator delete
   static void delete_rsptcLcLSDFitData(void *p) {
      delete ((::rspt::SDFitData*)p);
   }
   static void deleteArray_rsptcLcLSDFitData(void *p) {
      delete [] ((::rspt::SDFitData*)p);
   }
   static void destruct_rsptcLcLSDFitData(void *p) {
      typedef ::rspt::SDFitData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::rspt::SDFitData

/********************************************************
* librad-spec-tools-rdict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablelibradmIspecmItoolsmIrdict();

extern "C" void G__set_cpp_environmentlibradmIspecmItoolsmIrdict() {
  G__cpp_reset_tagtablelibradmIspecmItoolsmIrdict();
}
#include <new>
extern "C" int G__cpp_dllrevlibradmIspecmItoolsmIrdict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* rspt::Binning */
static int G__libradmIspecmItoolsmIrdict_190_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const rspt::Binning*) G__getstructoffset())->from());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_190_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const rspt::Binning*) G__getstructoffset())->to());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_190_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const rspt::Binning*) G__getstructoffset())->until());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_190_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const rspt::Binning*) G__getstructoffset())->binWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_190_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const rspt::Binning*) G__getstructoffset())->nBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_190_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((rspt::Binning*) G__getstructoffset())->coord((int32_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_190_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((rspt::Binning*) G__getstructoffset())->bin((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_190_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rspt::Binning* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rspt::Binning[n];
     } else {
       p = new((void*) gvp) rspt::Binning[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rspt::Binning;
     } else {
       p = new((void*) gvp) rspt::Binning;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLBinning));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_190_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rspt::Binning* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rspt::Binning(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (size_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) rspt::Binning(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (size_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rspt::Binning((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) rspt::Binning((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLBinning));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_190_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rspt::Binning* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new rspt::Binning((TAxis*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) rspt::Binning((TAxis*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLBinning));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libradmIspecmItoolsmIrdict_190_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   rspt::Binning* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new rspt::Binning(*(rspt::Binning*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLBinning));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef rspt::Binning G__TrsptcLcLBinning;
static int G__libradmIspecmItoolsmIrdict_190_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (rspt::Binning*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((rspt::Binning*) (soff+(sizeof(rspt::Binning)*i)))->~G__TrsptcLcLBinning();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (rspt::Binning*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((rspt::Binning*) (soff))->~G__TrsptcLcLBinning();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libradmIspecmItoolsmIrdict_190_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rspt::Binning* dest = (rspt::Binning*) G__getstructoffset();
   *dest = *(rspt::Binning*) libp->para[0].ref;
   const rspt::Binning& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* rspt::HistAnalysis */
static int G__libradmIspecmItoolsmIrdict_242_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) rspt::HistAnalysis::findPeaks((TH1*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) rspt::HistAnalysis::findPeaks((TH1*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) rspt::HistAnalysis::findPeaks((TH1*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) rspt::HistAnalysis::findPeaks((TH1*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_242_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 85, (long) rspt::HistAnalysis::findSigPeaks((TH1*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (double) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) rspt::HistAnalysis::findSigPeaks((TH1*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) rspt::HistAnalysis::findSigPeaks((TH1*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) rspt::HistAnalysis::findSigPeaks((TH1*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) rspt::HistAnalysis::findSigPeaks((TH1*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) rspt::HistAnalysis::findSigPeaks((TH1*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_242_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 85, (long) rspt::HistAnalysis::fitPeaks(
(TH1*) G__int(libp->para[0]), (TSpectrum*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (Option_t*) G__int(libp->para[3])
, (Option_t*) G__int(libp->para[4]), (bool) G__int(libp->para[5])
, (const char*) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) rspt::HistAnalysis::fitPeaks((TH1*) G__int(libp->para[0]), (TSpectrum*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (Option_t*) G__int(libp->para[3])
, (Option_t*) G__int(libp->para[4]), (bool) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) rspt::HistAnalysis::fitPeaks((TH1*) G__int(libp->para[0]), (TSpectrum*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (Option_t*) G__int(libp->para[3])
, (Option_t*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) rspt::HistAnalysis::fitPeaks((TH1*) G__int(libp->para[0]), (TSpectrum*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (Option_t*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) rspt::HistAnalysis::fitPeaks((TH1*) G__int(libp->para[0]), (TSpectrum*) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_242_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 85, (long) rspt::HistAnalysis::fitPeaksTSF((TH1*) G__int(libp->para[0]), (TSpectrum*) G__int(libp->para[1])
, (TH1**) G__int(libp->para[2]), (TSpectrumFit**) G__int(libp->para[3])
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) rspt::HistAnalysis::fitPeaksTSF((TH1*) G__int(libp->para[0]), (TSpectrum*) G__int(libp->para[1])
, (TH1**) G__int(libp->para[2]), (TSpectrumFit**) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) rspt::HistAnalysis::fitPeaksTSF((TH1*) G__int(libp->para[0]), (TSpectrum*) G__int(libp->para[1])
, (TH1**) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) rspt::HistAnalysis::fitPeaksTSF((TH1*) G__int(libp->para[0]), (TSpectrum*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_242_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 85, (long) rspt::HistAnalysis::findAndFitPeaks(
(TH1*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (const char*) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) rspt::HistAnalysis::findAndFitPeaks((TH1*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) rspt::HistAnalysis::findAndFitPeaks((TH1*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) rspt::HistAnalysis::findAndFitPeaks((TH1*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) rspt::HistAnalysis::findAndFitPeaks((TH1*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) rspt::HistAnalysis::findAndFitPeaks((TH1*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) rspt::HistAnalysis::findAndFitPeaks((TH1*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_242_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      rspt::HistAnalysis::removeBackground((TH1*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      rspt::HistAnalysis::removeBackground((TH1*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      rspt::HistAnalysis::removeBackground((TH1*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      rspt::HistAnalysis::removeBackground((TH1*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_242_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      rspt::HistAnalysis::filterMinOf3((TH1*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_242_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      rspt::HistAnalysis::copyBins(*(vector<double>*) libp->para[0].ref, (TH1*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_242_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      rspt::HistAnalysis::copyBins((TH1*) G__int(libp->para[0]), *(vector<double>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_242_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      rspt::HistAnalysis::copyBins(*(vector<float>*) libp->para[0].ref, (TH1*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_242_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      rspt::HistAnalysis::copyBins((TH1*) G__int(libp->para[0]), *(vector<float>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__libradmIspecmItoolsmIrdict_242_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rspt::HistAnalysis *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rspt::HistAnalysis[n];
     } else {
       p = new((void*) gvp) rspt::HistAnalysis[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rspt::HistAnalysis;
     } else {
       p = new((void*) gvp) rspt::HistAnalysis;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLHistAnalysis));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libradmIspecmItoolsmIrdict_242_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   rspt::HistAnalysis* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new rspt::HistAnalysis(*(rspt::HistAnalysis*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLHistAnalysis));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef rspt::HistAnalysis G__TrsptcLcLHistAnalysis;
static int G__libradmIspecmItoolsmIrdict_242_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (rspt::HistAnalysis*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((rspt::HistAnalysis*) (soff+(sizeof(rspt::HistAnalysis)*i)))->~G__TrsptcLcLHistAnalysis();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (rspt::HistAnalysis*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((rspt::HistAnalysis*) (soff))->~G__TrsptcLcLHistAnalysis();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libradmIspecmItoolsmIrdict_242_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rspt::HistAnalysis* dest = (rspt::HistAnalysis*) G__getstructoffset();
   const rspt::HistAnalysis& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* rspt::SDFitData */
static int G__libradmIspecmItoolsmIrdict_306_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rspt::SDFitData* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new rspt::SDFitData((TF1*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) rspt::SDFitData((TF1*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDFitData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_306_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((rspt::SDFitData*) G__getstructoffset())->getMean((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_306_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((rspt::SDFitData*) G__getstructoffset())->getMeanError((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_306_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((rspt::SDFitData*) G__getstructoffset())->getSigma((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_306_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((rspt::SDFitData*) G__getstructoffset())->getSigmaError((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_306_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((rspt::SDFitData*) G__getstructoffset())->getUsage((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_306_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((rspt::SDFitData*) G__getstructoffset())->getNPeaks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_306_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((rspt::SDFitData*) G__getstructoffset())->getEnergy((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_306_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((rspt::SDFitData*) G__getstructoffset())->getResUsage((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_306_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rspt::SDFitData*) G__getstructoffset())->setEnergy((unsigned int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_306_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((rspt::SDFitData*) G__getstructoffset())->setUsage((unsigned int) G__int(libp->para[0]), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((rspt::SDFitData*) G__getstructoffset())->setUsage((unsigned int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_306_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((rspt::SDFitData*) G__getstructoffset())->setResUsage((unsigned int) G__int(libp->para[0]), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((rspt::SDFitData*) G__getstructoffset())->setResUsage((unsigned int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libradmIspecmItoolsmIrdict_306_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   rspt::SDFitData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new rspt::SDFitData(*(rspt::SDFitData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDFitData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef rspt::SDFitData G__TrsptcLcLSDFitData;
static int G__libradmIspecmItoolsmIrdict_306_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (rspt::SDFitData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((rspt::SDFitData*) (soff+(sizeof(rspt::SDFitData)*i)))->~G__TrsptcLcLSDFitData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (rspt::SDFitData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((rspt::SDFitData*) (soff))->~G__TrsptcLcLSDFitData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libradmIspecmItoolsmIrdict_306_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rspt::SDFitData* dest = (rspt::SDFitData*) G__getstructoffset();
   *dest = *(rspt::SDFitData*) libp->para[0].ref;
   const rspt::SDFitData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* rspt::SDCalibrator */
static int G__libradmIspecmItoolsmIrdict_307_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rspt::SDCalibrator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rspt::SDCalibrator[n];
     } else {
       p = new((void*) gvp) rspt::SDCalibrator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rspt::SDCalibrator;
     } else {
       p = new((void*) gvp) rspt::SDCalibrator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDCalibrator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_307_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((rspt::SDCalibrator*) G__getstructoffset())->calibrate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_307_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rspt::SDCalibrator*) G__getstructoffset())->addResult((rspt::SDFitData*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_307_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((rspt::SDCalibrator*) G__getstructoffset())->getCalObjects());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_307_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rspt::SDCalibrator*) G__getstructoffset())->setupCalGraphs();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_307_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((rspt::SDCalibrator*) G__getstructoffset())->getIntercept());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_307_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((rspt::SDCalibrator*) G__getstructoffset())->getSlope());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libradmIspecmItoolsmIrdict_307_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   rspt::SDCalibrator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new rspt::SDCalibrator(*(rspt::SDCalibrator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDCalibrator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef rspt::SDCalibrator G__TrsptcLcLSDCalibrator;
static int G__libradmIspecmItoolsmIrdict_307_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (rspt::SDCalibrator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((rspt::SDCalibrator*) (soff+(sizeof(rspt::SDCalibrator)*i)))->~G__TrsptcLcLSDCalibrator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (rspt::SDCalibrator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((rspt::SDCalibrator*) (soff))->~G__TrsptcLcLSDCalibrator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libradmIspecmItoolsmIrdict_307_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rspt::SDCalibrator* dest = (rspt::SDCalibrator*) G__getstructoffset();
   *dest = *(rspt::SDCalibrator*) libp->para[0].ref;
   const rspt::SDCalibrator& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* rspt::SDMultiLineFitter */
static int G__libradmIspecmItoolsmIrdict_308_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rspt::SDMultiLineFitter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rspt::SDMultiLineFitter[n];
     } else {
       p = new((void*) gvp) rspt::SDMultiLineFitter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rspt::SDMultiLineFitter;
     } else {
       p = new((void*) gvp) rspt::SDMultiLineFitter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDMultiLineFitter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_308_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rspt::SDMultiLineFitter*) G__getstructoffset())->setThreshold((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_308_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rspt::SDMultiLineFitter*) G__getstructoffset())->setSigma((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_308_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rspt::SDMultiLineFitter*) G__getstructoffset())->setPreCal((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_308_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rspt::SDMultiLineFitter*) G__getstructoffset())->setPreCal((TF1*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_308_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rspt::SDMultiLineFitter*) G__getstructoffset())->setWidth((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_308_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rspt::SDMultiLineFitter*) G__getstructoffset())->setRange((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_308_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rspt::SDMultiLineFitter*) G__getstructoffset())->resetPreCal();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_308_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         vector<rspt::SDFitData*>* pobj;
         vector<rspt::SDFitData*> xobj = ((rspt::SDMultiLineFitter*) G__getstructoffset())->makeCalFits((TH1*) G__int(libp->para[0]), *((vector<double>*) G__int(libp->para[1]))
, (vector<bool>*) G__int(libp->para[2]));
         pobj = new vector<rspt::SDFitData*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         vector<rspt::SDFitData*>* pobj;
         vector<rspt::SDFitData*> xobj = ((rspt::SDMultiLineFitter*) G__getstructoffset())->makeCalFits((TH1*) G__int(libp->para[0]), *((vector<double>*) G__int(libp->para[1])));
         pobj = new vector<rspt::SDFitData*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libradmIspecmItoolsmIrdict_308_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   rspt::SDMultiLineFitter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new rspt::SDMultiLineFitter(*(rspt::SDMultiLineFitter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDMultiLineFitter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef rspt::SDMultiLineFitter G__TrsptcLcLSDMultiLineFitter;
static int G__libradmIspecmItoolsmIrdict_308_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (rspt::SDMultiLineFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((rspt::SDMultiLineFitter*) (soff+(sizeof(rspt::SDMultiLineFitter)*i)))->~G__TrsptcLcLSDMultiLineFitter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (rspt::SDMultiLineFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((rspt::SDMultiLineFitter*) (soff))->~G__TrsptcLcLSDMultiLineFitter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libradmIspecmItoolsmIrdict_308_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rspt::SDMultiLineFitter* dest = (rspt::SDMultiLineFitter*) G__getstructoffset();
   *dest = *(rspt::SDMultiLineFitter*) libp->para[0].ref;
   const rspt::SDMultiLineFitter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* rspt::SDPeak */
static int G__libradmIspecmItoolsmIrdict_314_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) rspt::SDPeak::gauss((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_314_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) rspt::SDPeak::gauss((double) G__double(libp->para[0]), (double*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_314_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) rspt::SDPeak::skewedGauss((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_314_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) rspt::SDPeak::skewedGauss((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_314_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) rspt::SDPeak::stepWithSigma((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_314_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) rspt::SDPeak::stepWithSigma((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_314_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letdouble(result7, 100, (double) rspt::SDPeak::peakShape(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6])));
      break;
   case 6:
      G__letdouble(result7, 100, (double) rspt::SDPeak::peakShape((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 100, (double) rspt::SDPeak::peakShape((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) rspt::SDPeak::peakShape((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_314_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) rspt::SDPeak::peakShape((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_314_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rspt::SDPeak* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rspt::SDPeak[n];
     } else {
       p = new((void*) gvp) rspt::SDPeak[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rspt::SDPeak;
     } else {
       p = new((void*) gvp) rspt::SDPeak;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPeak));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libradmIspecmItoolsmIrdict_314_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   rspt::SDPeak* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new rspt::SDPeak(*(rspt::SDPeak*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPeak));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef rspt::SDPeak G__TrsptcLcLSDPeak;
static int G__libradmIspecmItoolsmIrdict_314_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (rspt::SDPeak*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((rspt::SDPeak*) (soff+(sizeof(rspt::SDPeak)*i)))->~G__TrsptcLcLSDPeak();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (rspt::SDPeak*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((rspt::SDPeak*) (soff))->~G__TrsptcLcLSDPeak();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libradmIspecmItoolsmIrdict_314_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rspt::SDPeak* dest = (rspt::SDPeak*) G__getstructoffset();
   *dest = *(rspt::SDPeak*) libp->para[0].ref;
   const rspt::SDPeak& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* rspt::MultiPeakShape */
static int G__libradmIspecmItoolsmIrdict_315_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const rspt::MultiPeakShape*) G__getstructoffset())->nPeaks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_315_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((rspt::MultiPeakShape*) G__getstructoffset())->operator()((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_315_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((rspt::MultiPeakShape*) G__getstructoffset())->newTF1((const char*) G__int(libp->para[0]), (TSpectrum*) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((rspt::MultiPeakShape*) G__getstructoffset())->newTF1((const char*) G__int(libp->para[0]), (TSpectrum*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((rspt::MultiPeakShape*) G__getstructoffset())->newTF1((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_315_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rspt::MultiPeakShape* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rspt::MultiPeakShape(
(Int_t) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (TF1*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) rspt::MultiPeakShape(
(Int_t) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (TF1*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rspt::MultiPeakShape((Int_t) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) rspt::MultiPeakShape((Int_t) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rspt::MultiPeakShape((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) rspt::MultiPeakShape((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShape));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libradmIspecmItoolsmIrdict_315_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   rspt::MultiPeakShape* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new rspt::MultiPeakShape(*(rspt::MultiPeakShape*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShape));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef rspt::MultiPeakShape G__TrsptcLcLMultiPeakShape;
static int G__libradmIspecmItoolsmIrdict_315_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (rspt::MultiPeakShape*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((rspt::MultiPeakShape*) (soff+(sizeof(rspt::MultiPeakShape)*i)))->~G__TrsptcLcLMultiPeakShape();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (rspt::MultiPeakShape*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((rspt::MultiPeakShape*) (soff))->~G__TrsptcLcLMultiPeakShape();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libradmIspecmItoolsmIrdict_315_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rspt::MultiPeakShape* dest = (rspt::MultiPeakShape*) G__getstructoffset();
   *dest = *(rspt::MultiPeakShape*) libp->para[0].ref;
   const rspt::MultiPeakShape& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* rspt::SDPeakTSF */
static int G__libradmIspecmItoolsmIrdict_316_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) rspt::SDPeakTSF::shape(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_316_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) rspt::SDPeakTSF::area((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_316_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rspt::SDPeakTSF* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rspt::SDPeakTSF[n];
     } else {
       p = new((void*) gvp) rspt::SDPeakTSF[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rspt::SDPeakTSF;
     } else {
       p = new((void*) gvp) rspt::SDPeakTSF;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPeakTSF));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libradmIspecmItoolsmIrdict_316_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   rspt::SDPeakTSF* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new rspt::SDPeakTSF(*(rspt::SDPeakTSF*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPeakTSF));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef rspt::SDPeakTSF G__TrsptcLcLSDPeakTSF;
static int G__libradmIspecmItoolsmIrdict_316_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (rspt::SDPeakTSF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((rspt::SDPeakTSF*) (soff+(sizeof(rspt::SDPeakTSF)*i)))->~G__TrsptcLcLSDPeakTSF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (rspt::SDPeakTSF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((rspt::SDPeakTSF*) (soff))->~G__TrsptcLcLSDPeakTSF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libradmIspecmItoolsmIrdict_316_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rspt::SDPeakTSF* dest = (rspt::SDPeakTSF*) G__getstructoffset();
   *dest = *(rspt::SDPeakTSF*) libp->para[0].ref;
   const rspt::SDPeakTSF& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* rspt::MultiPeakShapeTSF */
static int G__libradmIspecmItoolsmIrdict_317_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const rspt::MultiPeakShapeTSF*) G__getstructoffset())->nPeaks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_317_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((rspt::MultiPeakShapeTSF*) G__getstructoffset())->operator()((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_317_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const rspt::MultiPeakShapeTSF*) G__getstructoffset())->newTF1((const char*) G__int(libp->para[0]), *(rspt::Binning*) libp->para[1].ref
, (TSpectrumFit*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_317_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rspt::MultiPeakShapeTSF* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rspt::MultiPeakShapeTSF((Int_t) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) rspt::MultiPeakShapeTSF((Int_t) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rspt::MultiPeakShapeTSF((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) rspt::MultiPeakShapeTSF((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShapeTSF));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libradmIspecmItoolsmIrdict_317_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   rspt::MultiPeakShapeTSF* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new rspt::MultiPeakShapeTSF(*(rspt::MultiPeakShapeTSF*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShapeTSF));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef rspt::MultiPeakShapeTSF G__TrsptcLcLMultiPeakShapeTSF;
static int G__libradmIspecmItoolsmIrdict_317_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (rspt::MultiPeakShapeTSF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((rspt::MultiPeakShapeTSF*) (soff+(sizeof(rspt::MultiPeakShapeTSF)*i)))->~G__TrsptcLcLMultiPeakShapeTSF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (rspt::MultiPeakShapeTSF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((rspt::MultiPeakShapeTSF*) (soff))->~G__TrsptcLcLMultiPeakShapeTSF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libradmIspecmItoolsmIrdict_317_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rspt::MultiPeakShapeTSF* dest = (rspt::MultiPeakShapeTSF*) G__getstructoffset();
   *dest = *(rspt::MultiPeakShapeTSF*) libp->para[0].ref;
   const rspt::MultiPeakShapeTSF& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* rspt::SDPreCal */
static int G__libradmIspecmItoolsmIrdict_318_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rspt::SDPreCal* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rspt::SDPreCal[n];
     } else {
       p = new((void*) gvp) rspt::SDPreCal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rspt::SDPreCal;
     } else {
       p = new((void*) gvp) rspt::SDPreCal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPreCal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_318_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((rspt::SDPreCal*) G__getstructoffset())->calcPreCal(*((vector<double>*) G__int(libp->para[0])), *((vector<double>*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_318_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rspt::SDPreCal*) G__getstructoffset())->setDistThres((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_318_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rspt::SDPreCal*) G__getstructoffset())->setIntThres((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libradmIspecmItoolsmIrdict_318_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         rspt::SDPreCal::next_line_info* pobj;
         rspt::SDPreCal::next_line_info xobj = ((rspt::SDPreCal*) G__getstructoffset())->genLineInfo(*((rspt::SDPreCal::next_line_info*) G__int(libp->para[0])), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
         pobj = new rspt::SDPreCal::next_line_info(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libradmIspecmItoolsmIrdict_318_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   rspt::SDPreCal* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new rspt::SDPreCal(*(rspt::SDPreCal*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPreCal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef rspt::SDPreCal G__TrsptcLcLSDPreCal;
static int G__libradmIspecmItoolsmIrdict_318_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (rspt::SDPreCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((rspt::SDPreCal*) (soff+(sizeof(rspt::SDPreCal)*i)))->~G__TrsptcLcLSDPreCal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (rspt::SDPreCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((rspt::SDPreCal*) (soff))->~G__TrsptcLcLSDPreCal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libradmIspecmItoolsmIrdict_318_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rspt::SDPreCal* dest = (rspt::SDPreCal*) G__getstructoffset();
   *dest = *(rspt::SDPreCal*) libp->para[0].ref;
   const rspt::SDPreCal& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* rspt::Binning */

/* rspt::HistAnalysis */

/* rspt::SDFitData */

/* rspt::SDCalibrator */

/* rspt::SDMultiLineFitter */

/* rspt::SDPeak */

/* rspt::MultiPeakShape */

/* rspt::SDPeakTSF */

/* rspt::MultiPeakShapeTSF */

/* rspt::SDPreCal */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunclibradmIspecmItoolsmIrdict {
 public:
  G__Sizep2memfunclibradmIspecmItoolsmIrdict(): p(&G__Sizep2memfunclibradmIspecmItoolsmIrdict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunclibradmIspecmItoolsmIrdict::*p)();
};

size_t G__get_sizep2memfunclibradmIspecmItoolsmIrdict()
{
  G__Sizep2memfunclibradmIspecmItoolsmIrdict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancelibradmIspecmItoolsmIrdict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShape))) {
     rspt::MultiPeakShape *G__Lderived;
     G__Lderived=(rspt::MultiPeakShape*)0x1000;
     {
       ROOT::Math::ParamFunctor *G__Lpbase=(ROOT::Math::ParamFunctor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShape),G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_ROOTcLcLMathcLcLParamFunctor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShapeTSF))) {
     rspt::MultiPeakShapeTSF *G__Lderived;
     G__Lderived=(rspt::MultiPeakShapeTSF*)0x1000;
     {
       ROOT::Math::ParamFunctor *G__Lpbase=(ROOT::Math::ParamFunctor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShapeTSF),G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_ROOTcLcLMathcLcLParamFunctor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablelibradmIspecmItoolsmIrdict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("int32_t",105,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<UInt_t,Int_t>",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_pairlEunsignedsPintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<rspt::SDFitData*>",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlErsptcLcLSDFitDatamUcOallocatorlErsptcLcLSDFitDatamUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlErsptcLcLSDFitDatamUcOallocatorlErsptcLcLSDFitDatamUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlErsptcLcLSDFitDatamUcOallocatorlErsptcLcLSDFitDatamUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlErsptcLcLSDFitDatamUcOallocatorlErsptcLcLSDFitDatamUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlErsptcLcLSDFitDatamUcOallocatorlErsptcLcLSDFitDatamUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Stats",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLDescriptiveStatisticslEfloatgR),0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPreCal));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<DescriptiveStatistics<double>,DescriptiveStatistics<double> >",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_pairlErsptcLcLDescriptiveStatisticslEdoublegRcOrsptcLcLDescriptiveStatisticslEdoublegRsPgR),0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPreCal));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Stats_pair",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_pairlErsptcLcLDescriptiveStatisticslEdoublegRcOrsptcLcLDescriptiveStatisticslEdoublegRsPgR),0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPreCal));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<int,int> >",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<int,int> >",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<int,int> >",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Mapping",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR),0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPreCal));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Line",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_pairlEdoublecOdoublegR),0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPreCal));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<SDPreCal::Mapping,SDPreCal::Stats>",117,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_pairlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcOrsptcLcLDescriptiveStatisticslEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* rspt::Binning */
static void G__setup_memvarrsptcLcLBinning(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLBinning));
   { rspt::Binning *p; p=(rspt::Binning*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"m_from=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"m_binWidth=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,2,"m_nBins=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* rspt::HistAnalysis */
static void G__setup_memvarrsptcLcLHistAnalysis(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLHistAnalysis));
   { rspt::HistAnalysis *p; p=(rspt::HistAnalysis*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* rspt::SDFitData */
static void G__setup_memvarrsptcLcLSDFitData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDFitData));
   { rspt::SDFitData *p; p=(rspt::SDFitData*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"m_valid=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"m_npeaks=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TF1),-1,-1,2,"m_fit=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlEboolcOallocatorlEboolgRsPgR),G__defined_typename("vector<bool>"),-1,2,"m_usage=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlEboolcOallocatorlEboolgRsPgR),G__defined_typename("vector<bool>"),-1,2,"m_res_usage=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,2,"m_energy=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* rspt::SDCalibrator */
static void G__setup_memvarrsptcLcLSDCalibrator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDCalibrator));
   { rspt::SDCalibrator *p; p=(rspt::SDCalibrator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->intercept)-(long)(p)),100,0,0,-1,-1,-1,1,"intercept=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->slope)-(long)(p)),100,0,0,-1,-1,-1,1,"slope=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TCanvas),-1,-1,2,"calCanv=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TF1),-1,-1,2,"rescal_ch2fch=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TF1),-1,-1,2,"rescal_e2fe=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TF1),-1,-1,2,"cal_e2ch=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TF1),-1,-1,2,"cal_ch2e=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TList),-1,-1,2,"m_objects=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TGraphErrors),-1,-1,2,"cal_graph=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TGraphErrors),-1,-1,2,"rescal_graph=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* rspt::SDMultiLineFitter */
static void G__setup_memvarrsptcLcLSDMultiLineFitter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDMultiLineFitter));
   { rspt::SDMultiLineFitter *p; p=(rspt::SDMultiLineFitter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_maxADCch)-(long)(p)),100,0,0,-1,-1,-1,1,"m_maxADCch=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"Np=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,2,"m_sigma=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"m_iteration=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"m_threshold=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"m_low_limit=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"m_high_limit=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"m_width=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"m_npeaks_max=",0,(char*)NULL);
   G__memvar_setup((void*)0,70,0,0,-1,-1,-1,2,"m_specXPeak=",0,(char*)NULL);
   G__memvar_setup((void*)0,70,0,0,-1,-1,-1,2,"m_specYPeak=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDCalibrator),-1,-1,2,"calibrator=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TH1),-1,-1,2,"m_raw_hist=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TCanvas),-1,-1,2,"m_cal_canv=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TF1),-1,-1,2,"m_preCalibration_ch2e=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TF1),-1,-1,2,"m_preCalibration_e2ch=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* rspt::SDPeak */
static void G__setup_memvarrsptcLcLSDPeak(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPeak));
   { rspt::SDPeak *p; p=(rspt::SDPeak*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* rspt::MultiPeakShape */
static void G__setup_memvarrsptcLcLMultiPeakShape(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShape));
   { rspt::MultiPeakShape *p; p=(rspt::MultiPeakShape*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"m_nPeaks=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"m_skewEnabled=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TF1),-1,-1,2,"m_bg=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* rspt::SDPeakTSF */
static void G__setup_memvarrsptcLcLSDPeakTSF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPeakTSF));
   { rspt::SDPeakTSF *p; p=(rspt::SDPeakTSF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* rspt::MultiPeakShapeTSF */
static void G__setup_memvarrsptcLcLMultiPeakShapeTSF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShapeTSF));
   { rspt::MultiPeakShapeTSF *p; p=(rspt::MultiPeakShapeTSF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"m_nPeaks=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"m_skewEnabled=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* rspt::SDPreCal */
static void G__setup_memvarrsptcLcLSDPreCal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPreCal));
   { rspt::SDPreCal *p; p=(rspt::SDPreCal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"debug=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,2,"m_source_collection=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,2,"m_data_collection=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"m_source_size=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"m_data_size=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"m_prev_source=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"m_prev_data=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"m_dist_thres=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"m_int_thres=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TF1),-1,-1,2,"fit=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TGraph),-1,-1,2,"precal_graph=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarlibradmIspecmItoolsmIrdict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncrsptcLcLBinning(void) {
   /* rspt::Binning */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLBinning));
   G__memfunc_setup("from",436,G__libradmIspecmItoolsmIrdict_190_0_1, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("to",227,G__libradmIspecmItoolsmIrdict_190_0_2, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("until",556,G__libradmIspecmItoolsmIrdict_190_0_3, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("binWidth",825,G__libradmIspecmItoolsmIrdict_190_0_4, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nBins",506,G__libradmIspecmItoolsmIrdict_190_0_5, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("coord",535,G__libradmIspecmItoolsmIrdict_190_0_6, 100, -1, -1, 0, 1, 1, 1, 0, "i - 'int32_t' 0 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("bin",313,G__libradmIspecmItoolsmIrdict_190_0_7, 105, -1, G__defined_typename("int32_t"), 0, 1, 1, 1, 0, "d - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Binning",709,G__libradmIspecmItoolsmIrdict_190_0_8, 105, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLBinning), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Binning",709,G__libradmIspecmItoolsmIrdict_190_0_9, 105, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLBinning), -1, 0, 3, 1, 1, 0, 
"d - - 0 - orig d - - 0 - bwidth "
"k - 'size_t' 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Binning",709,G__libradmIspecmItoolsmIrdict_190_0_10, 105, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLBinning), -1, 0, 1, 1, 1, 0, "U 'TAxis' - 10 - axis", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Binning", 709, G__libradmIspecmItoolsmIrdict_190_0_11, (int) ('i'), G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLBinning), -1, 0, 1, 1, 1, 0, "u 'rspt::Binning' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Binning", 835, G__libradmIspecmItoolsmIrdict_190_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libradmIspecmItoolsmIrdict_190_0_13, (int) ('u'), G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLBinning), -1, 1, 1, 1, 1, 0, "u 'rspt::Binning' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncrsptcLcLHistAnalysis(void) {
   /* rspt::HistAnalysis */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLHistAnalysis));
   G__memfunc_setup("findPeaks",917,G__libradmIspecmItoolsmIrdict_242_0_1, 85, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TSpectrum), -1, 0, 4, 3, 1, 0, 
"U 'TH1' - 0 - hist C - 'Option_t' 10 '\"goff\"' option "
"d - - 0 '4.0' sigma d - - 0 '0.1' threshold", (char*)NULL, (void*) G__func2void( (TSpectrum* (*)(TH1*, Option_t*, double, double))(&rspt::HistAnalysis::findPeaks) ), 0);
   G__memfunc_setup("findSigPeaks",1208,G__libradmIspecmItoolsmIrdict_242_0_2, 85, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TSpectrum), -1, 0, 6, 3, 1, 0, 
"U 'TH1' - 0 - hist C - 'Option_t' 10 '\"goff\"' option "
"d - - 0 '4.0' sigma d - - 0 '0.01' threshold "
"i - 'Int_t' 0 '10' nBgIter d - - 0 '3.5' sigThresh", (char*)NULL, (void*) G__func2void( (TSpectrum* (*)(TH1*, Option_t*, double, double, Int_t, double))(&rspt::HistAnalysis::findSigPeaks) ), 0);
   G__memfunc_setup("fitPeaks",823,G__libradmIspecmItoolsmIrdict_242_0_3, 85, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TF1), -1, 0, 7, 3, 1, 0, 
"U 'TH1' - 0 - hist U 'TSpectrum' - 0 - peaks "
"d - - 0 - sigma C - 'Option_t' 10 '\"\"' option "
"C - 'Option_t' 10 '\"\"' goption g - - 0 'true' enableSkew "
"C - - 10 '\"pol2\"' bgModel", (char*)NULL, (void*) G__func2void( (TF1* (*)(TH1*, TSpectrum*, double, Option_t*, Option_t*, bool, const char*))(&rspt::HistAnalysis::fitPeaks) ), 0);
   G__memfunc_setup("fitPeaksTSF",1060,G__libradmIspecmItoolsmIrdict_242_0_4, 85, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TF1), -1, 0, 5, 3, 1, 0, 
"U 'TH1' - 10 - hist U 'TSpectrum' - 0 - spectrum "
"U 'TH1' - 2 '0' fitHist U 'TSpectrumFit' - 2 '0' resultTSF "
"g - - 0 'true' fitBG", (char*)NULL, (void*) G__func2void( (TF1* (*)(const TH1*, TSpectrum*, TH1**, TSpectrumFit**, bool))(&rspt::HistAnalysis::fitPeaksTSF) ), 0);
   G__memfunc_setup("findAndFitPeaks",1483,G__libradmIspecmItoolsmIrdict_242_0_5, 85, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TF1), -1, 0, 7, 3, 1, 0, 
"U 'TH1' - 0 - hist C - 'Option_t' 10 '\"\"' option "
"C - 'Option_t' 10 '\"\"' goption d - - 0 '4.0' sigma "
"d - - 0 '0.1' threshold g - - 0 'true' enableSkew "
"C - - 10 '\"pol2\"' bgModel", (char*)NULL, (void*) G__func2void( (TF1* (*)(TH1*, Option_t*, Option_t*, double, double, bool, const char*))(&rspt::HistAnalysis::findAndFitPeaks) ), 0);
   G__memfunc_setup("removeBackground",1678,G__libradmIspecmItoolsmIrdict_242_0_6, 121, -1, -1, 0, 4, 3, 1, 0, 
"U 'TH1' - 0 - hist C - 'Option_t' 10 '\"\"' option "
"i - 'Int_t' 0 '10' nBgIter d - - 0 '3.5' threshold", (char*)NULL, (void*) G__func2void( (void (*)(TH1*, Option_t*, Int_t, double))(&rspt::HistAnalysis::removeBackground) ), 0);
   G__memfunc_setup("filterMinOf3",1170,G__libradmIspecmItoolsmIrdict_242_0_7, 121, -1, -1, 0, 1, 3, 1, 0, "U 'TH1' - 0 - hist", (char*)NULL, (void*) G__func2void( (void (*)(TH1*))(&rspt::HistAnalysis::filterMinOf3) ), 0);
   G__memfunc_setup("copyBins",839,G__libradmIspecmItoolsmIrdict_242_0_8, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'vector<double,allocator<double> >' 'vector<double>' 1 - dest U 'TH1' - 10 - src", (char*)NULL, (void*) G__func2void( (void (*)(vector<double>&, const TH1*))(&rspt::HistAnalysis::copyBins) ), 0);
   G__memfunc_setup("copyBins",839,G__libradmIspecmItoolsmIrdict_242_0_9, 121, -1, -1, 0, 2, 3, 1, 0, 
"U 'TH1' - 0 - src u 'vector<double,allocator<double> >' 'vector<double>' 11 - dest", (char*)NULL, (void*) G__func2void( (void (*)(TH1*, const vector<double>&))(&rspt::HistAnalysis::copyBins) ), 0);
   G__memfunc_setup("copyBins",839,G__libradmIspecmItoolsmIrdict_242_0_10, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'vector<float,allocator<float> >' 'vector<float>' 1 - dest U 'TH1' - 10 - src", (char*)NULL, (void*) G__func2void( (void (*)(vector<float>&, const TH1*))(&rspt::HistAnalysis::copyBins) ), 0);
   G__memfunc_setup("copyBins",839,G__libradmIspecmItoolsmIrdict_242_0_11, 121, -1, -1, 0, 2, 3, 1, 0, 
"U 'TH1' - 0 - src u 'vector<float,allocator<float> >' 'vector<float>' 11 - dest", (char*)NULL, (void*) G__func2void( (void (*)(TH1*, const vector<float>&))(&rspt::HistAnalysis::copyBins) ), 0);
   // automatic default constructor
   G__memfunc_setup("HistAnalysis", 1244, G__libradmIspecmItoolsmIrdict_242_0_12, (int) ('i'), G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLHistAnalysis), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HistAnalysis", 1244, G__libradmIspecmItoolsmIrdict_242_0_13, (int) ('i'), G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLHistAnalysis), -1, 0, 1, 1, 1, 0, "u 'rspt::HistAnalysis' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HistAnalysis", 1370, G__libradmIspecmItoolsmIrdict_242_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libradmIspecmItoolsmIrdict_242_0_15, (int) ('u'), G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLHistAnalysis), -1, 1, 1, 1, 1, 0, "u 'rspt::HistAnalysis' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncrsptcLcLSDFitData(void) {
   /* rspt::SDFitData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDFitData));
   G__memfunc_setup("SDFitData",820,G__libradmIspecmItoolsmIrdict_306_0_1, 105, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDFitData), -1, 0, 2, 1, 1, 0, 
"U 'TF1' - 0 - fit i - - 0 - npeaks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMean",705,G__libradmIspecmItoolsmIrdict_306_0_2, 100, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMeanError",1227,G__libradmIspecmItoolsmIrdict_306_0_3, 100, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigma",817,G__libradmIspecmItoolsmIrdict_306_0_4, 100, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaError",1339,G__libradmIspecmItoolsmIrdict_306_0_5, 100, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUsage",821,G__libradmIspecmItoolsmIrdict_306_0_6, 103, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNPeaks",898,G__libradmIspecmItoolsmIrdict_306_0_7, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEnergy",938,G__libradmIspecmItoolsmIrdict_306_0_8, 100, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getResUsage",1119,G__libradmIspecmItoolsmIrdict_306_0_9, 103, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEnergy",950,G__libradmIspecmItoolsmIrdict_306_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - - 0 - index d - - 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUsage",833,G__libradmIspecmItoolsmIrdict_306_0_11, 103, -1, -1, 0, 2, 1, 1, 0, 
"h - - 0 - index g - - 0 'true' use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setResUsage",1131,G__libradmIspecmItoolsmIrdict_306_0_12, 103, -1, -1, 0, 2, 1, 1, 0, 
"h - - 0 - index g - - 0 'true' use", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SDFitData", 820, G__libradmIspecmItoolsmIrdict_306_0_13, (int) ('i'), G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDFitData), -1, 0, 1, 1, 1, 0, "u 'rspt::SDFitData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SDFitData", 946, G__libradmIspecmItoolsmIrdict_306_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libradmIspecmItoolsmIrdict_306_0_15, (int) ('u'), G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDFitData), -1, 1, 1, 1, 1, 0, "u 'rspt::SDFitData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncrsptcLcLSDCalibrator(void) {
   /* rspt::SDCalibrator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDCalibrator));
   G__memfunc_setup("SDCalibrator",1178,G__libradmIspecmItoolsmIrdict_307_0_1, 105, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDCalibrator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calibrate",935,G__libradmIspecmItoolsmIrdict_307_0_2, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addResult",936,G__libradmIspecmItoolsmIrdict_307_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'rspt::SDFitData' - 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCalObjects",1306,G__libradmIspecmItoolsmIrdict_307_0_4, 85, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setupCalGraphs",1446,G__libradmIspecmItoolsmIrdict_307_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIntercept",1262,G__libradmIspecmItoolsmIrdict_307_0_6, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSlope",835,G__libradmIspecmItoolsmIrdict_307_0_7, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SDCalibrator", 1178, G__libradmIspecmItoolsmIrdict_307_0_9, (int) ('i'), G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDCalibrator), -1, 0, 1, 1, 1, 0, "u 'rspt::SDCalibrator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SDCalibrator", 1304, G__libradmIspecmItoolsmIrdict_307_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libradmIspecmItoolsmIrdict_307_0_11, (int) ('u'), G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDCalibrator), -1, 1, 1, 1, 1, 0, "u 'rspt::SDCalibrator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncrsptcLcLSDMultiLineFitter(void) {
   /* rspt::SDMultiLineFitter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDMultiLineFitter));
   G__memfunc_setup("SDMultiLineFitter",1688,G__libradmIspecmItoolsmIrdict_308_0_1, 105, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDMultiLineFitter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThreshold",1273,G__libradmIspecmItoolsmIrdict_308_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - thresh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigma",829,G__libradmIspecmItoolsmIrdict_308_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - sig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPreCal",899,G__libradmIspecmItoolsmIrdict_308_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - slope d - - 0 - intercept", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPreCal",899,G__libradmIspecmItoolsmIrdict_308_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TF1' - 0 - precal_ch2e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWidth",844,G__libradmIspecmItoolsmIrdict_308_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - width", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRange",825,G__libradmIspecmItoolsmIrdict_308_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - lowEdge d - - 0 - highEdge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetPreCal",1114,G__libradmIspecmItoolsmIrdict_308_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeCalFits",1092,G__libradmIspecmItoolsmIrdict_308_0_9, 117, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_vectorlErsptcLcLSDFitDatamUcOallocatorlErsptcLcLSDFitDatamUgRsPgR), G__defined_typename("vector<rspt::SDFitData*>"), 0, 3, 1, 1, 0, 
"U 'TH1' - 0 - raw_hist u 'vector<double,allocator<double> >' 'vector<double>' 0 - energy "
"U 'vector<bool,allocator<bool> >' 'vector<bool>' 0 '0' reject_res_cal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRange",813,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_pairlEdoublecOintgR), -1, 0, 3, 1, 2, 0, 
"u 'vector<double,allocator<double> >' 'vector<double>' 0 - energy i - - 0 - iter "
"i - - 0 - lines_to_fit", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SDMultiLineFitter", 1688, G__libradmIspecmItoolsmIrdict_308_0_12, (int) ('i'), G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDMultiLineFitter), -1, 0, 1, 1, 1, 0, "u 'rspt::SDMultiLineFitter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SDMultiLineFitter", 1814, G__libradmIspecmItoolsmIrdict_308_0_13, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libradmIspecmItoolsmIrdict_308_0_14, (int) ('u'), G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDMultiLineFitter), -1, 1, 1, 1, 1, 0, "u 'rspt::SDMultiLineFitter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncrsptcLcLSDPeak(void) {
   /* rspt::SDPeak */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPeak));
   G__memfunc_setup("gauss",547,G__libradmIspecmItoolsmIrdict_314_0_1, 100, -1, -1, 0, 2, 3, 1, 0, 
"d - - 0 - x d - - 0 - sigma", (char*)NULL, (void*) G__func2void( (double (*)(double, double))(&rspt::SDPeak::gauss) ), 0);
   G__memfunc_setup("gauss",547,G__libradmIspecmItoolsmIrdict_314_0_2, 100, -1, -1, 0, 2, 3, 1, 0, 
"d - - 0 - x D - - 0 - p", (char*)NULL, (void*) G__func2void( (double (*)(double, double*))(&rspt::SDPeak::gauss) ), 0);
   G__memfunc_setup("skewedGauss",1158,G__libradmIspecmItoolsmIrdict_314_0_3, 100, -1, -1, 0, 3, 3, 1, 0, 
"d - - 0 - x d - - 0 - sigma "
"d - - 0 - skew", (char*)NULL, (void*) G__func2void( (double (*)(double, double, double))(&rspt::SDPeak::skewedGauss) ), 0);
   G__memfunc_setup("skewedGauss",1158,G__libradmIspecmItoolsmIrdict_314_0_4, 100, -1, -1, 0, 2, 3, 1, 0, 
"D - - 0 - x D - - 0 - p", (char*)NULL, (void*) G__func2void( (double (*)(double*, double*))(&rspt::SDPeak::skewedGauss) ), 0);
   G__memfunc_setup("stepWithSigma",1353,G__libradmIspecmItoolsmIrdict_314_0_5, 100, -1, -1, 0, 2, 3, 1, 0, 
"d - - 0 - x d - - 0 - sigma", (char*)NULL, (void*) G__func2void( (double (*)(double, double))(&rspt::SDPeak::stepWithSigma) ), 0);
   G__memfunc_setup("stepWithSigma",1353,G__libradmIspecmItoolsmIrdict_314_0_6, 100, -1, -1, 0, 2, 3, 1, 0, 
"D - - 10 - x D - - 10 - p", (char*)NULL, (void*) G__func2void( (double (*)(const double*, const double*))(&rspt::SDPeak::stepWithSigma) ), 0);
   G__memfunc_setup("peakShape",914,G__libradmIspecmItoolsmIrdict_314_0_7, 100, -1, -1, 0, 7, 3, 1, 0, 
"d - - 0 - x d - - 0 - center "
"d - - 0 - area d - - 0 - sigma "
"d - - 0 '0' stepAmpl d - - 0 '0' skewFraction "
"d - - 0 '0' skewWidth", (char*)NULL, (void*) G__func2void( (double (*)(double, double, double, double, double, double, double))(&rspt::SDPeak::peakShape) ), 0);
   G__memfunc_setup("peakShape",914,G__libradmIspecmItoolsmIrdict_314_0_8, 100, -1, -1, 0, 2, 3, 1, 0, 
"D - - 10 - x D - - 10 - p", (char*)NULL, (void*) G__func2void( (double (*)(const double*, const double*))(&rspt::SDPeak::peakShape) ), 0);
   G__memfunc_setup("SDPeak",536,G__libradmIspecmItoolsmIrdict_314_0_9, 105, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPeak), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SDPeak", 536, G__libradmIspecmItoolsmIrdict_314_0_10, (int) ('i'), G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPeak), -1, 0, 1, 1, 1, 0, "u 'rspt::SDPeak' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SDPeak", 662, G__libradmIspecmItoolsmIrdict_314_0_11, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libradmIspecmItoolsmIrdict_314_0_12, (int) ('u'), G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPeak), -1, 1, 1, 1, 1, 0, "u 'rspt::SDPeak' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncrsptcLcLMultiPeakShape(void) {
   /* rspt::MultiPeakShape */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShape));
   G__memfunc_setup("nPeaks",610,G__libradmIspecmItoolsmIrdict_315_0_1, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__libradmIspecmItoolsmIrdict_315_0_2, 100, -1, -1, 0, 2, 1, 1, 0, 
"D - - 0 - x D - - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("newTF1",533,G__libradmIspecmItoolsmIrdict_315_0_3, 85, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TF1), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name U 'TSpectrum' - 0 '0' spectrum "
"d - - 0 '1' sigma", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MultiPeakShape",1405,G__libradmIspecmItoolsmIrdict_315_0_4, 105, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShape), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - n g - - 0 'true' enableSkew "
"U 'TF1' - 0 '0' bgModel", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("MultiPeakShape", 1405, G__libradmIspecmItoolsmIrdict_315_0_5, (int) ('i'), G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShape), -1, 0, 1, 1, 1, 0, "u 'rspt::MultiPeakShape' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MultiPeakShape", 1531, G__libradmIspecmItoolsmIrdict_315_0_6, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libradmIspecmItoolsmIrdict_315_0_7, (int) ('u'), G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShape), -1, 1, 1, 1, 1, 0, "u 'rspt::MultiPeakShape' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncrsptcLcLSDPeakTSF(void) {
   /* rspt::SDPeakTSF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPeakTSF));
   G__memfunc_setup("shape",529,G__libradmIspecmItoolsmIrdict_316_0_1, 100, -1, -1, 0, 7, 3, 1, 0, 
"d - - 0 - x d - - 0 - pos "
"d - - 0 - ampl d - - 0 - sigma "
"d - - 0 - t d - - 0 - b "
"d - - 0 - step", (char*)NULL, (void*) G__func2void( (double (*)(double, double, double, double, double, double, double))(&rspt::SDPeakTSF::shape) ), 0);
   G__memfunc_setup("area",409,G__libradmIspecmItoolsmIrdict_316_0_2, 100, -1, -1, 0, 4, 3, 1, 0, 
"d - - 0 - ampl d - - 0 - sigma "
"d - - 0 - t d - - 0 - b", (char*)NULL, (void*) G__func2void( (double (*)(double, double, double, double))(&rspt::SDPeakTSF::area) ), 0);
   G__memfunc_setup("SDPeakTSF",773,G__libradmIspecmItoolsmIrdict_316_0_3, 105, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPeakTSF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SDPeakTSF", 773, G__libradmIspecmItoolsmIrdict_316_0_4, (int) ('i'), G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPeakTSF), -1, 0, 1, 1, 1, 0, "u 'rspt::SDPeakTSF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SDPeakTSF", 899, G__libradmIspecmItoolsmIrdict_316_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libradmIspecmItoolsmIrdict_316_0_6, (int) ('u'), G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPeakTSF), -1, 1, 1, 1, 1, 0, "u 'rspt::SDPeakTSF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncrsptcLcLMultiPeakShapeTSF(void) {
   /* rspt::MultiPeakShapeTSF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShapeTSF));
   G__memfunc_setup("nPeaks",610,G__libradmIspecmItoolsmIrdict_317_0_1, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__libradmIspecmItoolsmIrdict_317_0_2, 100, -1, -1, 0, 2, 1, 1, 0, 
"D - - 0 - x D - - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("newTF1",533,G__libradmIspecmItoolsmIrdict_317_0_3, 85, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TF1), -1, 0, 3, 1, 1, 8, 
"C - - 10 - name u 'rspt::Binning' - 11 - binning "
"U 'TSpectrumFit' - 0 - tsf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MultiPeakShapeTSF",1642,G__libradmIspecmItoolsmIrdict_317_0_4, 105, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShapeTSF), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n g - - 0 'true' enableSkew", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("MultiPeakShapeTSF", 1642, G__libradmIspecmItoolsmIrdict_317_0_5, (int) ('i'), G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShapeTSF), -1, 0, 1, 1, 1, 0, "u 'rspt::MultiPeakShapeTSF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MultiPeakShapeTSF", 1768, G__libradmIspecmItoolsmIrdict_317_0_6, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libradmIspecmItoolsmIrdict_317_0_7, (int) ('u'), G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShapeTSF), -1, 1, 1, 1, 1, 0, "u 'rspt::MultiPeakShapeTSF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncrsptcLcLSDPreCal(void) {
   /* rspt::SDPreCal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPreCal));
   G__memfunc_setup("SDPreCal",718,G__libradmIspecmItoolsmIrdict_318_0_1, 105, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPreCal), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcPreCal",970,G__libradmIspecmItoolsmIrdict_318_0_2, 85, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_TF1), -1, 0, 2, 1, 1, 0, 
"u 'vector<double,allocator<double> >' 'vector<double>' 0 - source_lines u 'vector<double,allocator<double> >' 'vector<double>' 0 - data_lines", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDistThres",1254,G__libradmIspecmItoolsmIrdict_318_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - thres", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIntThres",1149,G__libradmIspecmItoolsmIrdict_318_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - thres", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("genLineInfo",1102,G__libradmIspecmItoolsmIrdict_318_0_5, 117, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPreCalcLcLnext_line_info), -1, 0, 3, 1, 1, 0, 
"u 'rspt::SDPreCal::next_line_info' - 0 - prev i - - 0 - next_s "
"i - - 0 - next_d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcError",925,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 1, 1, 2, 0, "u 'rspt::DescriptiveStatistics<float>' 'rspt::SDPreCal::Stats' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("match",525,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLDescriptiveStatisticslEfloatgR), G__defined_typename("rspt::SDPreCal::Stats"), 0, 1, 1, 2, 0, "u 'rspt::SDPreCal::next_line_info' - 0 - next", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("genMap",600,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_pairlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcOrsptcLcLDescriptiveStatisticslEfloatgRsPgR), G__defined_typename("pair<SDPreCal::Mapping,SDPreCal::Stats>"), 0, 3, 1, 2, 0, 
"u 'rspt::SDPreCal::next_line_info' - 0 - next u 'vector<pair<int,int>,allocator<pair<int,int> > >' 'rspt::SDPreCal::Mapping' 0 - prevMap "
"i - - 0 - calls", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SDPreCal", 718, G__libradmIspecmItoolsmIrdict_318_0_9, (int) ('i'), G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPreCal), -1, 0, 1, 1, 1, 0, "u 'rspt::SDPreCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SDPreCal", 844, G__libradmIspecmItoolsmIrdict_318_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libradmIspecmItoolsmIrdict_318_0_11, (int) ('u'), G__get_linked_tagnum(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPreCal), -1, 1, 1, 1, 1, 0, "u 'rspt::SDPreCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunclibradmIspecmItoolsmIrdict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globallibradmIspecmItoolsmIrdict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funclibradmIspecmItoolsmIrdict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_ROOT = { "ROOT" , 110 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_vectorlEboolcOallocatorlEboolgRsPgR = { "vector<bool,allocator<bool> >" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_TAxis = { "TAxis" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_rspt = { "rspt" , 110 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_rsptcLcLBinning = { "rspt::Binning" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_ROOTcLcLMath = { "ROOT::Math" , 110 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_ROOTcLcLMathcLcLParamFunctor = { "ROOT::Math::ParamFunctor" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_TSpectrum = { "TSpectrum" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_TSpectrumFit = { "TSpectrumFit" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_rsptcLcLHistAnalysis = { "rspt::HistAnalysis" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_pairlEunsignedsPintcOintgR = { "pair<unsigned int,int>" , 115 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR = { "vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_TGraphErrors = { "TGraphErrors" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDFitData = { "rspt::SDFitData" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDCalibrator = { "rspt::SDCalibrator" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDMultiLineFitter = { "rspt::SDMultiLineFitter" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_vectorlErsptcLcLSDFitDatamUcOallocatorlErsptcLcLSDFitDatamUgRsPgR = { "vector<rspt::SDFitData*,allocator<rspt::SDFitData*> >" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlErsptcLcLSDFitDatamUcOallocatorlErsptcLcLSDFitDatamUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<rspt::SDFitData*,allocator<rspt::SDFitData*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_pairlEdoublecOintgR = { "pair<double,int>" , 115 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPeak = { "rspt::SDPeak" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShape = { "rspt::MultiPeakShape" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPeakTSF = { "rspt::SDPeakTSF" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShapeTSF = { "rspt::MultiPeakShapeTSF" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPreCal = { "rspt::SDPreCal" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_rsptcLcLDescriptiveStatisticslEfloatgR = { "rspt::DescriptiveStatistics<float>" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_pairlErsptcLcLDescriptiveStatisticslEdoublegRcOrsptcLcLDescriptiveStatisticslEdoublegRsPgR = { "pair<rspt::DescriptiveStatistics<double>,rspt::DescriptiveStatistics<double> >" , 115 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR = { "vector<pair<int,int>,allocator<pair<int,int> > >" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<int,int>,allocator<pair<int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_pairlEdoublecOdoublegR = { "pair<double,double>" , 115 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPreCalcLcLnext_line_info = { "rspt::SDPreCal::next_line_info" , 115 , -1 };
G__linked_taginfo G__libradmIspecmItoolsmIrdictLN_pairlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcOrsptcLcLDescriptiveStatisticslEfloatgRsPgR = { "pair<vector<pair<int,int>,allocator<pair<int,int> > >,rspt::DescriptiveStatistics<float> >" , 115 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablelibradmIspecmItoolsmIrdict() {
  G__libradmIspecmItoolsmIrdictLN_ROOT.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_vectorlEboolcOallocatorlEboolgRsPgR.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_TList.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_TAxis.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_rspt.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_rsptcLcLBinning.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_TF1.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_TH1.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_ROOTcLcLMath.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_ROOTcLcLMathcLcLParamFunctor.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_TSpectrum.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_TSpectrumFit.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_rsptcLcLHistAnalysis.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_pairlEunsignedsPintcOintgR.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_TCanvas.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_TGraph.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_TGraphErrors.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDFitData.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDCalibrator.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDMultiLineFitter.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_vectorlErsptcLcLSDFitDatamUcOallocatorlErsptcLcLSDFitDatamUgRsPgR.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlErsptcLcLSDFitDatamUcOallocatorlErsptcLcLSDFitDatamUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_pairlEdoublecOintgR.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPeak.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShape.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPeakTSF.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShapeTSF.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPreCal.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_rsptcLcLDescriptiveStatisticslEfloatgR.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_pairlErsptcLcLDescriptiveStatisticslEdoublegRcOrsptcLcLDescriptiveStatisticslEdoublegRsPgR.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_pairlEdoublecOdoublegR.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPreCalcLcLnext_line_info.tagnum = -1 ;
  G__libradmIspecmItoolsmIrdictLN_pairlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcOrsptcLcLDescriptiveStatisticslEfloatgRsPgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablelibradmIspecmItoolsmIrdict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_ROOT);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_vectorlEboolcOallocatorlEboolgRsPgR);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_TList);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_TAxis);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_rspt);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLBinning),sizeof(rspt::Binning),-1,98560,(char*)NULL,G__setup_memvarrsptcLcLBinning,G__setup_memfuncrsptcLcLBinning);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_TF1);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_TH1);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_ROOTcLcLMath);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_ROOTcLcLMathcLcLParamFunctor);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_TSpectrum);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_TSpectrumFit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLHistAnalysis),sizeof(rspt::HistAnalysis),-1,65536,(char*)NULL,G__setup_memvarrsptcLcLHistAnalysis,G__setup_memfuncrsptcLcLHistAnalysis);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_pairlEunsignedsPintcOintgR);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_TCanvas);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_TGraph);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_TGraphErrors);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDFitData),sizeof(rspt::SDFitData),-1,99328,(char*)NULL,G__setup_memvarrsptcLcLSDFitData,G__setup_memfuncrsptcLcLSDFitData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDCalibrator),sizeof(rspt::SDCalibrator),-1,66816,(char*)NULL,G__setup_memvarrsptcLcLSDCalibrator,G__setup_memfuncrsptcLcLSDCalibrator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDMultiLineFitter),sizeof(rspt::SDMultiLineFitter),-1,66816,(char*)NULL,G__setup_memvarrsptcLcLSDMultiLineFitter,G__setup_memfuncrsptcLcLSDMultiLineFitter);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_vectorlErsptcLcLSDFitDatamUcOallocatorlErsptcLcLSDFitDatamUgRsPgR);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlErsptcLcLSDFitDatamUcOallocatorlErsptcLcLSDFitDatamUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_pairlEdoublecOintgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPeak),sizeof(rspt::SDPeak),-1,66816,(char*)NULL,G__setup_memvarrsptcLcLSDPeak,G__setup_memfuncrsptcLcLSDPeak);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShape),sizeof(rspt::MultiPeakShape),-1,98304,(char*)NULL,G__setup_memvarrsptcLcLMultiPeakShape,G__setup_memfuncrsptcLcLMultiPeakShape);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPeakTSF),sizeof(rspt::SDPeakTSF),-1,66816,(char*)NULL,G__setup_memvarrsptcLcLSDPeakTSF,G__setup_memfuncrsptcLcLSDPeakTSF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLMultiPeakShapeTSF),sizeof(rspt::MultiPeakShapeTSF),-1,98304,(char*)NULL,G__setup_memvarrsptcLcLMultiPeakShapeTSF,G__setup_memfuncrsptcLcLMultiPeakShapeTSF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPreCal),sizeof(rspt::SDPreCal),-1,66816,(char*)NULL,G__setup_memvarrsptcLcLSDPreCal,G__setup_memfuncrsptcLcLSDPreCal);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLDescriptiveStatisticslEfloatgR);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_pairlErsptcLcLDescriptiveStatisticslEdoublegRcOrsptcLcLDescriptiveStatisticslEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_pairlEdoublecOdoublegR);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_rsptcLcLSDPreCalcLcLnext_line_info);
   G__get_linked_tagnum_fwd(&G__libradmIspecmItoolsmIrdictLN_pairlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcOrsptcLcLDescriptiveStatisticslEfloatgRsPgR);
}
extern "C" void G__cpp_setuplibradmIspecmItoolsmIrdict(void) {
  G__check_setup_version(30051515,"G__cpp_setuplibradmIspecmItoolsmIrdict()");
  G__set_cpp_environmentlibradmIspecmItoolsmIrdict();
  G__cpp_setup_tagtablelibradmIspecmItoolsmIrdict();

  G__cpp_setup_inheritancelibradmIspecmItoolsmIrdict();

  G__cpp_setup_typetablelibradmIspecmItoolsmIrdict();

  G__cpp_setup_memvarlibradmIspecmItoolsmIrdict();

  G__cpp_setup_memfunclibradmIspecmItoolsmIrdict();
  G__cpp_setup_globallibradmIspecmItoolsmIrdict();
  G__cpp_setup_funclibradmIspecmItoolsmIrdict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunclibradmIspecmItoolsmIrdict();
  return;
}
class G__cpp_setup_initlibradmIspecmItoolsmIrdict {
  public:
    G__cpp_setup_initlibradmIspecmItoolsmIrdict() { G__add_setup_func("libradmIspecmItoolsmIrdict",(G__incsetup)(&G__cpp_setuplibradmIspecmItoolsmIrdict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initlibradmIspecmItoolsmIrdict() { G__remove_setup_func("libradmIspecmItoolsmIrdict"); }
};
G__cpp_setup_initlibradmIspecmItoolsmIrdict G__cpp_setup_initializerlibradmIspecmItoolsmIrdict;

